/*--------------------------------------------------------------------------------
    Copyright (c) Microsoft Corporation.  All rights reserved. 
    
*/
/**
    \file        

    \brief       Test volume group configuration parser.

    \date        2008-01-17 14:53:56

*/
/*----------------------------------------------------------------------------*/
#include <scxcorelib/scxcmn.h>
#include <testutils/scxunit.h>
#include <scxcorelib/stringaid.h>
#include <scxsystemlib/scxvgcfg.h>
#include <cppunit/extensions/HelperMacros.h>

#include <scxcorelib/scxexception.h>

class SCXVolumeGroupConfigTest : public CPPUNIT_NS::TestFixture
{
    CPPUNIT_TEST_SUITE( SCXVolumeGroupConfigTest );
    CPPUNIT_TEST( ParsingFormatErrorFails );
    CPPUNIT_TEST( ParsingValidStructure );
    CPPUNIT_TEST( VolumeGroupSectionIsCorrect );
    CPPUNIT_TEST( PhysicalDeviceIsCorrect );
    CPPUNIT_TEST( VolumeGroupSeqNoHelperIsCorrect );
    CPPUNIT_TEST( PartitionMapperIsCorrect );
#if defined(PF_DISTRO_REDHAT) && (PF_MAJOR==4)
    CPPUNIT_TEST( IsPartitionIsCorrect );
#endif
#if defined(linux)
    CPPUNIT_TEST( FindPartitionsTester );
#endif
    SCXUNIT_TEST_ATTRIBUTE(FindPartitionsTester,SLOW);
    CPPUNIT_TEST_SUITE_END();

private:
    SCXCoreLib::SCXHandle<SCXSystemLib::SCXVolumeGroupConfiguration> m_cfg;

    SCXCoreLib::SCXHandle<std::ostringstream> m_oWithError;
    SCXCoreLib::SCXHandle<std::ostringstream> m_oOk;

    SCXCoreLib::SCXHandle<std::istringstream> m_iWithError;
    SCXCoreLib::SCXHandle<std::istringstream> m_iOk;

public:
    void setUp(void)
    {
        m_cfg = 0;
        m_oWithError = new std::ostringstream();
        *m_oWithError << "VolGroup00 {\n seqno = 3\n physical_volumes {\n pv0 {\n device = \"/dev/hda2\"\n#}\n}\n }";
        m_oOk = new std::ostringstream();
        *m_oOk << "FirstVG {\n"
               << "id = \"KLfMOv-gQiZ-KSin-7WB8-3DeG-gsBQ-jOh1ru\"\n"
               << "seqno = 3\n"
               << "status = [\"RESIZEABLE\", \"READ\", \"WRITE\"]\n"
               << "extent_size = 65536\n"
               << "max_lv = 0\n"
               << "max_pv = 0\n\n"
               << "physical_volumes {\n\n"
               << "pv0 {\n"
               << "id = \"nOCkyE-o0Yn-ETdA-23Pb-hHp2-TR8s-NX2fvs\"\n"
               << "device = \"/dev/hda2\"\n\n"
               << "status = [\"ALLOCATABLE\"]\n"
               << "dev_size = 16563015\n"
               << "pe_start = 384\n"
               << "pe_count = 252\n"
               << "}\n}\n\n"
               << "logical_volumes {\n\n"
               << "TheLV {\n"
               << "id = \"GDgKef-JAZs-cOJe-uKyy-aFxL-339p-KACI0D\"\n"
               << "status = [\"READ\", \"WRITE\", \"VISIBLE\"]\n"
               << "segment_count = 1\n"
               << "segment1 {\n"
               << "start_extent = 0\n"
               << "extent_count = 220\n"
               << "type = \"striped\"\n"
               << "stripe_count = 1        # linear\n"
               << "stripes = [\n"
               << "\"pv0\", 0\n"
               << "]\n"
               << "}\n}\n"
               << "LogVol01 {\n"
               << "id = \"JgSK32-f2hp-yRsb-Nbtw-3KPm-J2Lw-I3nEQY\"\n"
               << "status = [\"READ\", \"WRITE\", \"VISIBLE\"]\n"
               << "segment_count = 1\n"
               << "segment1 {\n"
               << "start_extent = 0\n"
               << "extent_count = 32\n"
               << "type = \"striped\"\n"
               << "stripe_count = 1        # linear\n"
               << "stripes = [\n"
               << "\"pv0\", 220\n"
               << "]\n}\n}\n}\n}\n\n"
               << "# Generated by LVM2: Wed Jan  9 11:28:39 2008\n"
               << "contents = \"Text Format Volume Group\"\n"
               << "version = 1\n"
               << "description = \"\"\n"
               << "creation_host = \"localhost.localdomain\" # Linux localhost.localdomain 2.6.18-53.el5 #1 SMP Wed Oct 10 16:34:02 EDT 2007 i686\n"
               << "creation_time = 1199878119      # Wed Jan  9 11:28:39 2008\n";

        m_iWithError = new std::istringstream(m_oWithError->str());
        m_iOk = new std::istringstream(m_oOk->str());

    }

    void tearDown(void)
    {
        m_iWithError = 0;
        m_iOk = 0;
        m_oWithError = 0;
        m_oOk = 0;
        m_cfg = 0;
    }

    void ParsingFormatErrorFails(void)
    {
        CPPUNIT_ASSERT_THROW(m_cfg = new SCXSystemLib::SCXVolumeGroupConfiguration(*m_iWithError), SCXSystemLib::SCXVolumeGroupConfigurationException);        
    }

    void ParsingValidStructure()
    {
        CPPUNIT_ASSERT_NO_THROW(m_cfg = new SCXSystemLib::SCXVolumeGroupConfiguration(*m_iOk));
    }

    void VolumeGroupSectionIsCorrect()
    {
        CPPUNIT_ASSERT_NO_THROW(m_cfg = new SCXSystemLib::SCXVolumeGroupConfiguration(*m_iOk));
                
        CPPUNIT_ASSERT_EQUAL(static_cast<size_t>(1), m_cfg->GetRoot().GetSections().size());

        SCXCoreLib::SCXHandle<SCXSystemLib::SCXVolumeGroupConfigurationItem> item = *(m_cfg->GetRoot().GetSections().begin());
        
        CPPUNIT_ASSERT(0 == SCXCoreLib::StrCompare(item->GetName(), L"FirstVG"));
        
        CPPUNIT_ASSERT(item->GetAttributes().find(L"seqno") != item->GetAttributes().end());
        CPPUNIT_ASSERT(0 == SCXCoreLib::StrCompare(item->GetAttributes().find(L"seqno")->second, L"3"));
        CPPUNIT_ASSERT_EQUAL(static_cast<size_t>(2), item->GetSections().size());
    }

    void PhysicalDeviceIsCorrect()
    {
        CPPUNIT_ASSERT_NO_THROW(m_cfg = new SCXSystemLib::SCXVolumeGroupConfiguration(*m_iOk));
        CPPUNIT_ASSERT_EQUAL(static_cast<size_t>(1), m_cfg->GetRoot().GetSections().size());
        SCXCoreLib::SCXHandle<SCXSystemLib::SCXVolumeGroupConfigurationItem> item = *(m_cfg->GetRoot().GetSections().begin());
        CPPUNIT_ASSERT(1U <= item->GetSections().size());
        item = *(item->GetSections().begin());
        CPPUNIT_ASSERT(0 == SCXCoreLib::StrCompare(item->GetName(), L"physical_volumes"));
        CPPUNIT_ASSERT_EQUAL(static_cast<size_t>(1), item->GetSections().size());
        item = *(item->GetSections().begin());
        CPPUNIT_ASSERT(0 == SCXCoreLib::StrCompare(item->GetName(), L"pv0"));
        CPPUNIT_ASSERT_EQUAL(static_cast<size_t>(0), item->GetSections().size());
        CPPUNIT_ASSERT(item->GetAttributes().find(L"device") != item->GetAttributes().end());
        CPPUNIT_ASSERT(0 == SCXCoreLib::StrCompare(item->GetAttributes().find(L"device")->second, L"\"/dev/hda2\""));
    }

    void VolumeGroupSeqNoHelperIsCorrect()
    {
        CPPUNIT_ASSERT_NO_THROW(m_cfg = new SCXSystemLib::SCXVolumeGroupConfiguration(*m_iOk));

        CPPUNIT_ASSERT_NO_THROW(m_cfg->GetSeqNo());
        CPPUNIT_ASSERT_EQUAL(static_cast<size_t>(3), m_cfg->GetSeqNo());
    }

    void PartitionMapperIsCorrect()
    {
        CPPUNIT_ASSERT_NO_THROW(m_cfg = new SCXSystemLib::SCXVolumeGroupConfiguration(*m_iOk));
        
        std::wstring vg;
        std::wstring lv;

        CPPUNIT_ASSERT_THROW(m_cfg->MapPartition(L"/dev/hda1", vg, lv), SCXSystemLib::SCXVolumeGroupConfigurationException);
        CPPUNIT_ASSERT_NO_THROW(m_cfg->MapPartition(L"/dev/hda2", vg, lv));
        CPPUNIT_ASSERT(0 == SCXCoreLib::StrCompare(vg, L"FirstVG"));
        CPPUNIT_ASSERT(0 == SCXCoreLib::StrCompare(lv, L"TheLV"));
    }
#if defined(PF_DISTRO_REDHAT) && (PF_MAJOR==4)
    void IsPartitionIsCorrect()
    {
        system("rm -rf fakeDir");
        system("mkdir fakeDev");
        system("echo a > fakeDev/hda23");
        system("echo a > fakeDev/hda");
        system("echo a > fakeDev/c0d0s0");
        system("echo a > fakeDev/c0d0");
        system("echo a > fakeDev/disk3_p7");
        system("echo a > fakeDev/disk3");
        system("echo a > fakeDev/hdb");

        CPPUNIT_ASSERT(SCXSystemLib::SCXVolumeGroupConfiguration::IsPartition(L"fakeDev/hda23"));
        CPPUNIT_ASSERT( ! SCXSystemLib::SCXVolumeGroupConfiguration::IsPartition(L"fakeDev/hda"));
        CPPUNIT_ASSERT(SCXSystemLib::SCXVolumeGroupConfiguration::IsPartition(L"fakeDev/c0d0s0"));
        CPPUNIT_ASSERT( ! SCXSystemLib::SCXVolumeGroupConfiguration::IsPartition(L"fakeDev/c0d0"));
        CPPUNIT_ASSERT(SCXSystemLib::SCXVolumeGroupConfiguration::IsPartition(L"fakeDev/disk3_p7"));
        CPPUNIT_ASSERT( ! SCXSystemLib::SCXVolumeGroupConfiguration::IsPartition(L"fakeDev/disk3"));
        CPPUNIT_ASSERT( ! SCXSystemLib::SCXVolumeGroupConfiguration::IsPartition(L"fakeDev/sda2"));

        system("rm -rf fakeDir");
    }
#endif
    void FindPartitionsTester()
    {
        SCXUNIT_RESET_ASSERTION();
        CPPUNIT_ASSERT_NO_THROW(m_cfg = new SCXSystemLib::SCXVolumeGroupConfiguration(*m_iOk));
        /* The next test just tries to find a partion available on typical installs. For
           custom installs it may fail so it will not break the test. */
        try {
            std::vector<std::wstring> p = SCXSystemLib::SCXVolumeGroupConfiguration::FindPartitions(L"VolGroup00", L"LogVol00");
        }
        catch (SCXCoreLib::SCXException& e) { 
            std::wcout << std::endl << e.What() << std::endl << e.Where() << std::endl; 
            SCXUNIT_ASSERTIONS_FAILED(1);
        }
    }
};

CPPUNIT_TEST_SUITE_REGISTRATION( SCXVolumeGroupConfigTest );
